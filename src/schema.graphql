# import User from "./generated/prisma.graphql"
# import Account from "./generated/prisma.graphql"
# import ExpenseCategory from "./generated/prisma.graphql"
# import IncomeCategory from "./generated/prisma.graphql"
# import FinanceOperationRaw from "./generated/prisma.graphql"

type Query {
  me: User
  accounts: [Account!]!
  financeOperations(
    type: FinanceOperationType
    categoryId: ID
    date: DateTime
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [FinanceOperation!]!

  financeOperationsRaw(
    type: FinanceOperationType
    categoryId: ID
    date: DateTime
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [FinanceOperationRaw!]!

  expenseCategories: [ExpenseCategory!]!
  incomeCategories: [IncomeCategory!]!
}

type Mutation {
  auth(accountkitAccessToken: String!, name: String): AuthPayload!

  updateProfile(name: String!): User!

  createExpenseCategory(name: String!, mandatory: Boolean): ExpenseCategory!
  updateExpenseCategory(name: String, mandatory: Boolean): ExpenseCategory!
  deleteExpenseCategory(id: ID!): ExpenseCategory!

  createIncomeCategory(name: String!, mandatory: Boolean): IncomeCategory!
  updateIncomeCategory(name: String, mandatory: Boolean): IncomeCategory!
  deleteIncomeCategory(id: ID!): ExpenseCategory!

  createAccount(name: String!, balance: Float): Account!
  deleteAccount(id: ID!): Account!
  updateAccount(id: ID!, name: String!): Account!

  createExpense(amount: Float!, accountId: ID!, date: DateTime, comment: String, payee: String, categoryId: ID): Expense!
  updateExpense(id: ID!, amount: Float, accountId: ID, date: DateTime, comment: String, payee: String, categoryId: ID): Expense!

  createIncome(amount: Float!, accountId: ID!, date: DateTime, comment: String, place: String, categoryId: ID): Income!
  updateIncome(id: ID!, amount: Float, accountId: ID, date: DateTime, comment: String, place: String, categoryId: ID): Income!

  createTransfer(amount: Float!, accountId: ID!, date: DateTime, comment: String, toAccountId: ID!): Transfer!
  updateTransfer(id: ID!, amount: Float, accountId: ID, date: DateTime, comment: String, toAccountId: ID!): Transfer!

  deleteFinanceOperation(id: ID!): FinanceOperation!
}

type AuthPayload {
  token: String!
  user: User!
}

interface FinanceOperation {
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  owner: User!
  account: Account!
}

type Expense implements FinanceOperation {
  # interface
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  owner: User!
  account: Account!
  # custom fields
  payee: String
  category: ExpenseCategory
}

type Income implements FinanceOperation {
  # interface
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  owner: User!
  account: Account!
  # custom fields
  place: String
  category: IncomeCategory
}

type Transfer implements FinanceOperation {
  # interface
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  owner: User!
  account: Account!
  # custom fields
  toAccount: Account!
}

enum FinanceOperationType {
  EXPENSE
  INCOME
  TRANSFER
}
