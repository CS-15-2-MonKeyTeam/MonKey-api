# source: https://monkey-prisma.herokuapp.com/monkey/dev
# timestamp: Sun Nov 11 2018 17:24:08 GMT+0200 (Eastern European Standard Time)

type Account implements Node {
  id: ID!
  name: String!
  balance: Float!
  owner(where: UserWhereInput): User!
  financeOperations(where: FinanceOperationWhereInput, orderBy: FinanceOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinanceOperation!]
}

"""A connection to a list of items."""
type AccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  name: String!
  balance: Float
  owner: UserCreateOneWithoutAccountsInput!
  financeOperations: FinanceOperationCreateManyWithoutAccountInput
}

input AccountCreateManyWithoutOwnerInput {
  create: [AccountCreateWithoutOwnerInput!]
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOneWithoutFinanceOperationsInput {
  create: AccountCreateWithoutFinanceOperationsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutFinanceOperationsInput {
  name: String!
  balance: Float
  owner: UserCreateOneWithoutAccountsInput!
}

input AccountCreateWithoutOwnerInput {
  name: String!
  balance: Float
  financeOperations: FinanceOperationCreateManyWithoutAccountInput
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  balance_ASC
  balance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccountPreviousValues {
  id: ID!
  name: String!
  balance: Float!
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
}

input AccountUpdateDataInput {
  name: String
  balance: Float
  owner: UserUpdateOneWithoutAccountsInput
  financeOperations: FinanceOperationUpdateManyWithoutAccountInput
}

input AccountUpdateInput {
  name: String
  balance: Float
  owner: UserUpdateOneWithoutAccountsInput
  financeOperations: FinanceOperationUpdateManyWithoutAccountInput
}

input AccountUpdateManyWithoutOwnerInput {
  create: [AccountCreateWithoutOwnerInput!]
  connect: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AccountUpdateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AccountUpdateDataInput
  upsert: AccountUpsertNestedInput
}

input AccountUpdateOneWithoutFinanceOperationsInput {
  create: AccountCreateWithoutFinanceOperationsInput
  connect: AccountWhereUniqueInput
  delete: Boolean
  update: AccountUpdateWithoutFinanceOperationsDataInput
  upsert: AccountUpsertWithoutFinanceOperationsInput
}

input AccountUpdateWithoutFinanceOperationsDataInput {
  name: String
  balance: Float
  owner: UserUpdateOneWithoutAccountsInput
}

input AccountUpdateWithoutOwnerDataInput {
  name: String
  balance: Float
  financeOperations: FinanceOperationUpdateManyWithoutAccountInput
}

input AccountUpdateWithWhereUniqueWithoutOwnerInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutOwnerDataInput!
}

input AccountUpsertNestedInput {
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountUpsertWithoutFinanceOperationsInput {
  update: AccountUpdateWithoutFinanceOperationsDataInput!
  create: AccountCreateWithoutFinanceOperationsInput!
}

input AccountUpsertWithWhereUniqueWithoutOwnerInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutOwnerDataInput!
  create: AccountCreateWithoutOwnerInput!
}

input AccountWhereInput {
  """Logical AND on all given filters."""
  AND: [AccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  balance: Float

  """All values that are not equal to given value."""
  balance_not: Float

  """All values that are contained in given list."""
  balance_in: [Float!]

  """All values that are not contained in given list."""
  balance_not_in: [Float!]

  """All values less than the given value."""
  balance_lt: Float

  """All values less than or equal the given value."""
  balance_lte: Float

  """All values greater than the given value."""
  balance_gt: Float

  """All values greater than or equal the given value."""
  balance_gte: Float
  owner: UserWhereInput
  financeOperations_every: FinanceOperationWhereInput
  financeOperations_some: FinanceOperationWhereInput
  financeOperations_none: FinanceOperationWhereInput
  _MagicalBackRelation_TransferToAccount_every: FinanceOperationWhereInput
  _MagicalBackRelation_TransferToAccount_some: FinanceOperationWhereInput
  _MagicalBackRelation_TransferToAccount_none: FinanceOperationWhereInput
}

input AccountWhereUniqueInput {
  id: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateExpenseCategory {
  count: Int!
}

type AggregateFinanceOperation {
  count: Int!
}

type AggregateIncomeCategory {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type ExpenseCategory implements Node {
  id: ID!
  name: String!
  mandatory: Boolean!
  public: Boolean!
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type ExpenseCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseCategoryEdge]!
  aggregate: AggregateExpenseCategory!
}

input ExpenseCategoryCreateInput {
  name: String!
  mandatory: Boolean
  public: Boolean
  createdBy: UserCreateOneWithoutExpenseCategoriesInput
}

input ExpenseCategoryCreateManyWithoutCreatedByInput {
  create: [ExpenseCategoryCreateWithoutCreatedByInput!]
  connect: [ExpenseCategoryWhereUniqueInput!]
}

input ExpenseCategoryCreateOneInput {
  create: ExpenseCategoryCreateInput
  connect: ExpenseCategoryWhereUniqueInput
}

input ExpenseCategoryCreateWithoutCreatedByInput {
  name: String!
  mandatory: Boolean
  public: Boolean
}

"""An edge in a connection."""
type ExpenseCategoryEdge {
  """The item at the end of the edge."""
  node: ExpenseCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExpenseCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mandatory_ASC
  mandatory_DESC
  public_ASC
  public_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExpenseCategoryPreviousValues {
  id: ID!
  name: String!
  mandatory: Boolean!
  public: Boolean!
}

type ExpenseCategorySubscriptionPayload {
  mutation: MutationType!
  node: ExpenseCategory
  updatedFields: [String!]
  previousValues: ExpenseCategoryPreviousValues
}

input ExpenseCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExpenseCategoryWhereInput
}

input ExpenseCategoryUpdateDataInput {
  name: String
  mandatory: Boolean
  public: Boolean
  createdBy: UserUpdateOneWithoutExpenseCategoriesInput
}

input ExpenseCategoryUpdateInput {
  name: String
  mandatory: Boolean
  public: Boolean
  createdBy: UserUpdateOneWithoutExpenseCategoriesInput
}

input ExpenseCategoryUpdateManyWithoutCreatedByInput {
  create: [ExpenseCategoryCreateWithoutCreatedByInput!]
  connect: [ExpenseCategoryWhereUniqueInput!]
  disconnect: [ExpenseCategoryWhereUniqueInput!]
  delete: [ExpenseCategoryWhereUniqueInput!]
  update: [ExpenseCategoryUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ExpenseCategoryUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input ExpenseCategoryUpdateOneInput {
  create: ExpenseCategoryCreateInput
  connect: ExpenseCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ExpenseCategoryUpdateDataInput
  upsert: ExpenseCategoryUpsertNestedInput
}

input ExpenseCategoryUpdateWithoutCreatedByDataInput {
  name: String
  mandatory: Boolean
  public: Boolean
}

input ExpenseCategoryUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ExpenseCategoryWhereUniqueInput!
  data: ExpenseCategoryUpdateWithoutCreatedByDataInput!
}

input ExpenseCategoryUpsertNestedInput {
  update: ExpenseCategoryUpdateDataInput!
  create: ExpenseCategoryCreateInput!
}

input ExpenseCategoryUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ExpenseCategoryWhereUniqueInput!
  update: ExpenseCategoryUpdateWithoutCreatedByDataInput!
  create: ExpenseCategoryCreateWithoutCreatedByInput!
}

input ExpenseCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [ExpenseCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExpenseCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExpenseCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mandatory: Boolean

  """All values that are not equal to given value."""
  mandatory_not: Boolean
  public: Boolean

  """All values that are not equal to given value."""
  public_not: Boolean
  createdBy: UserWhereInput
  _MagicalBackRelation_ExpenseCategoryToFinanceOperation_every: FinanceOperationWhereInput
  _MagicalBackRelation_ExpenseCategoryToFinanceOperation_some: FinanceOperationWhereInput
  _MagicalBackRelation_ExpenseCategoryToFinanceOperation_none: FinanceOperationWhereInput
}

input ExpenseCategoryWhereUniqueInput {
  id: ID
}

type FinanceOperation implements Node {
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  createdBy(where: UserWhereInput): User!
  account(where: AccountWhereInput): Account!
  expense_payee: String
  expense_category(where: ExpenseCategoryWhereInput): ExpenseCategory
  income_place: String
  income_category(where: IncomeCategoryWhereInput): IncomeCategory
  transfer_toAccount(where: AccountWhereInput): Account
}

"""A connection to a list of items."""
type FinanceOperationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinanceOperationEdge]!
  aggregate: AggregateFinanceOperation!
}

input FinanceOperationCreateInput {
  amount: Float!
  date: DateTime!
  comment: String
  expense_payee: String
  income_place: String
  createdBy: UserCreateOneWithoutFinanceOperationsInput!
  account: AccountCreateOneWithoutFinanceOperationsInput!
  expense_category: ExpenseCategoryCreateOneInput
  income_category: IncomeCategoryCreateOneInput
  transfer_toAccount: AccountCreateOneInput
}

input FinanceOperationCreateManyWithoutAccountInput {
  create: [FinanceOperationCreateWithoutAccountInput!]
  connect: [FinanceOperationWhereUniqueInput!]
}

input FinanceOperationCreateManyWithoutCreatedByInput {
  create: [FinanceOperationCreateWithoutCreatedByInput!]
  connect: [FinanceOperationWhereUniqueInput!]
}

input FinanceOperationCreateWithoutAccountInput {
  amount: Float!
  date: DateTime!
  comment: String
  expense_payee: String
  income_place: String
  createdBy: UserCreateOneWithoutFinanceOperationsInput!
  expense_category: ExpenseCategoryCreateOneInput
  income_category: IncomeCategoryCreateOneInput
  transfer_toAccount: AccountCreateOneInput
}

input FinanceOperationCreateWithoutCreatedByInput {
  amount: Float!
  date: DateTime!
  comment: String
  expense_payee: String
  income_place: String
  account: AccountCreateOneWithoutFinanceOperationsInput!
  expense_category: ExpenseCategoryCreateOneInput
  income_category: IncomeCategoryCreateOneInput
  transfer_toAccount: AccountCreateOneInput
}

"""An edge in a connection."""
type FinanceOperationEdge {
  """The item at the end of the edge."""
  node: FinanceOperation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FinanceOperationOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  date_ASC
  date_DESC
  comment_ASC
  comment_DESC
  expense_payee_ASC
  expense_payee_DESC
  income_place_ASC
  income_place_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FinanceOperationPreviousValues {
  id: ID!
  amount: Float!
  date: DateTime!
  comment: String
  expense_payee: String
  income_place: String
}

type FinanceOperationSubscriptionPayload {
  mutation: MutationType!
  node: FinanceOperation
  updatedFields: [String!]
  previousValues: FinanceOperationPreviousValues
}

input FinanceOperationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FinanceOperationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinanceOperationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinanceOperationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinanceOperationWhereInput
}

input FinanceOperationUpdateInput {
  amount: Float
  date: DateTime
  comment: String
  expense_payee: String
  income_place: String
  createdBy: UserUpdateOneWithoutFinanceOperationsInput
  account: AccountUpdateOneWithoutFinanceOperationsInput
  expense_category: ExpenseCategoryUpdateOneInput
  income_category: IncomeCategoryUpdateOneInput
  transfer_toAccount: AccountUpdateOneInput
}

input FinanceOperationUpdateManyWithoutAccountInput {
  create: [FinanceOperationCreateWithoutAccountInput!]
  connect: [FinanceOperationWhereUniqueInput!]
  disconnect: [FinanceOperationWhereUniqueInput!]
  delete: [FinanceOperationWhereUniqueInput!]
  update: [FinanceOperationUpdateWithWhereUniqueWithoutAccountInput!]
  upsert: [FinanceOperationUpsertWithWhereUniqueWithoutAccountInput!]
}

input FinanceOperationUpdateManyWithoutCreatedByInput {
  create: [FinanceOperationCreateWithoutCreatedByInput!]
  connect: [FinanceOperationWhereUniqueInput!]
  disconnect: [FinanceOperationWhereUniqueInput!]
  delete: [FinanceOperationWhereUniqueInput!]
  update: [FinanceOperationUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [FinanceOperationUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input FinanceOperationUpdateWithoutAccountDataInput {
  amount: Float
  date: DateTime
  comment: String
  expense_payee: String
  income_place: String
  createdBy: UserUpdateOneWithoutFinanceOperationsInput
  expense_category: ExpenseCategoryUpdateOneInput
  income_category: IncomeCategoryUpdateOneInput
  transfer_toAccount: AccountUpdateOneInput
}

input FinanceOperationUpdateWithoutCreatedByDataInput {
  amount: Float
  date: DateTime
  comment: String
  expense_payee: String
  income_place: String
  account: AccountUpdateOneWithoutFinanceOperationsInput
  expense_category: ExpenseCategoryUpdateOneInput
  income_category: IncomeCategoryUpdateOneInput
  transfer_toAccount: AccountUpdateOneInput
}

input FinanceOperationUpdateWithWhereUniqueWithoutAccountInput {
  where: FinanceOperationWhereUniqueInput!
  data: FinanceOperationUpdateWithoutAccountDataInput!
}

input FinanceOperationUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FinanceOperationWhereUniqueInput!
  data: FinanceOperationUpdateWithoutCreatedByDataInput!
}

input FinanceOperationUpsertWithWhereUniqueWithoutAccountInput {
  where: FinanceOperationWhereUniqueInput!
  update: FinanceOperationUpdateWithoutAccountDataInput!
  create: FinanceOperationCreateWithoutAccountInput!
}

input FinanceOperationUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FinanceOperationWhereUniqueInput!
  update: FinanceOperationUpdateWithoutCreatedByDataInput!
  create: FinanceOperationCreateWithoutCreatedByInput!
}

input FinanceOperationWhereInput {
  """Logical AND on all given filters."""
  AND: [FinanceOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinanceOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinanceOperationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  expense_payee: String

  """All values that are not equal to given value."""
  expense_payee_not: String

  """All values that are contained in given list."""
  expense_payee_in: [String!]

  """All values that are not contained in given list."""
  expense_payee_not_in: [String!]

  """All values less than the given value."""
  expense_payee_lt: String

  """All values less than or equal the given value."""
  expense_payee_lte: String

  """All values greater than the given value."""
  expense_payee_gt: String

  """All values greater than or equal the given value."""
  expense_payee_gte: String

  """All values containing the given string."""
  expense_payee_contains: String

  """All values not containing the given string."""
  expense_payee_not_contains: String

  """All values starting with the given string."""
  expense_payee_starts_with: String

  """All values not starting with the given string."""
  expense_payee_not_starts_with: String

  """All values ending with the given string."""
  expense_payee_ends_with: String

  """All values not ending with the given string."""
  expense_payee_not_ends_with: String
  income_place: String

  """All values that are not equal to given value."""
  income_place_not: String

  """All values that are contained in given list."""
  income_place_in: [String!]

  """All values that are not contained in given list."""
  income_place_not_in: [String!]

  """All values less than the given value."""
  income_place_lt: String

  """All values less than or equal the given value."""
  income_place_lte: String

  """All values greater than the given value."""
  income_place_gt: String

  """All values greater than or equal the given value."""
  income_place_gte: String

  """All values containing the given string."""
  income_place_contains: String

  """All values not containing the given string."""
  income_place_not_contains: String

  """All values starting with the given string."""
  income_place_starts_with: String

  """All values not starting with the given string."""
  income_place_not_starts_with: String

  """All values ending with the given string."""
  income_place_ends_with: String

  """All values not ending with the given string."""
  income_place_not_ends_with: String
  createdBy: UserWhereInput
  account: AccountWhereInput
  expense_category: ExpenseCategoryWhereInput
  income_category: IncomeCategoryWhereInput
  transfer_toAccount: AccountWhereInput
}

input FinanceOperationWhereUniqueInput {
  id: ID
}

type IncomeCategory implements Node {
  id: ID!
  name: String!
  mandatory: Boolean!
  public: Boolean!
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type IncomeCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IncomeCategoryEdge]!
  aggregate: AggregateIncomeCategory!
}

input IncomeCategoryCreateInput {
  name: String!
  mandatory: Boolean
  public: Boolean
  createdBy: UserCreateOneWithoutIncomeCategoriesInput
}

input IncomeCategoryCreateManyWithoutCreatedByInput {
  create: [IncomeCategoryCreateWithoutCreatedByInput!]
  connect: [IncomeCategoryWhereUniqueInput!]
}

input IncomeCategoryCreateOneInput {
  create: IncomeCategoryCreateInput
  connect: IncomeCategoryWhereUniqueInput
}

input IncomeCategoryCreateWithoutCreatedByInput {
  name: String!
  mandatory: Boolean
  public: Boolean
}

"""An edge in a connection."""
type IncomeCategoryEdge {
  """The item at the end of the edge."""
  node: IncomeCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IncomeCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  mandatory_ASC
  mandatory_DESC
  public_ASC
  public_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type IncomeCategoryPreviousValues {
  id: ID!
  name: String!
  mandatory: Boolean!
  public: Boolean!
}

type IncomeCategorySubscriptionPayload {
  mutation: MutationType!
  node: IncomeCategory
  updatedFields: [String!]
  previousValues: IncomeCategoryPreviousValues
}

input IncomeCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IncomeCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IncomeCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IncomeCategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IncomeCategoryWhereInput
}

input IncomeCategoryUpdateDataInput {
  name: String
  mandatory: Boolean
  public: Boolean
  createdBy: UserUpdateOneWithoutIncomeCategoriesInput
}

input IncomeCategoryUpdateInput {
  name: String
  mandatory: Boolean
  public: Boolean
  createdBy: UserUpdateOneWithoutIncomeCategoriesInput
}

input IncomeCategoryUpdateManyWithoutCreatedByInput {
  create: [IncomeCategoryCreateWithoutCreatedByInput!]
  connect: [IncomeCategoryWhereUniqueInput!]
  disconnect: [IncomeCategoryWhereUniqueInput!]
  delete: [IncomeCategoryWhereUniqueInput!]
  update: [IncomeCategoryUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [IncomeCategoryUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input IncomeCategoryUpdateOneInput {
  create: IncomeCategoryCreateInput
  connect: IncomeCategoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: IncomeCategoryUpdateDataInput
  upsert: IncomeCategoryUpsertNestedInput
}

input IncomeCategoryUpdateWithoutCreatedByDataInput {
  name: String
  mandatory: Boolean
  public: Boolean
}

input IncomeCategoryUpdateWithWhereUniqueWithoutCreatedByInput {
  where: IncomeCategoryWhereUniqueInput!
  data: IncomeCategoryUpdateWithoutCreatedByDataInput!
}

input IncomeCategoryUpsertNestedInput {
  update: IncomeCategoryUpdateDataInput!
  create: IncomeCategoryCreateInput!
}

input IncomeCategoryUpsertWithWhereUniqueWithoutCreatedByInput {
  where: IncomeCategoryWhereUniqueInput!
  update: IncomeCategoryUpdateWithoutCreatedByDataInput!
  create: IncomeCategoryCreateWithoutCreatedByInput!
}

input IncomeCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [IncomeCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [IncomeCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IncomeCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mandatory: Boolean

  """All values that are not equal to given value."""
  mandatory_not: Boolean
  public: Boolean

  """All values that are not equal to given value."""
  public_not: Boolean
  createdBy: UserWhereInput
  _MagicalBackRelation_FinanceOperationToIncomeCategory_every: FinanceOperationWhereInput
  _MagicalBackRelation_FinanceOperationToIncomeCategory_some: FinanceOperationWhereInput
  _MagicalBackRelation_FinanceOperationToIncomeCategory_none: FinanceOperationWhereInput
}

input IncomeCategoryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createFinanceOperation(data: FinanceOperationCreateInput!): FinanceOperation!
  createIncomeCategory(data: IncomeCategoryCreateInput!): IncomeCategory!
  createExpenseCategory(data: ExpenseCategoryCreateInput!): ExpenseCategory!
  createAccount(data: AccountCreateInput!): Account!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFinanceOperation(data: FinanceOperationUpdateInput!, where: FinanceOperationWhereUniqueInput!): FinanceOperation
  updateIncomeCategory(data: IncomeCategoryUpdateInput!, where: IncomeCategoryWhereUniqueInput!): IncomeCategory
  updateExpenseCategory(data: ExpenseCategoryUpdateInput!, where: ExpenseCategoryWhereUniqueInput!): ExpenseCategory
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFinanceOperation(where: FinanceOperationWhereUniqueInput!): FinanceOperation
  deleteIncomeCategory(where: IncomeCategoryWhereUniqueInput!): IncomeCategory
  deleteExpenseCategory(where: ExpenseCategoryWhereUniqueInput!): ExpenseCategory
  deleteAccount(where: AccountWhereUniqueInput!): Account
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFinanceOperation(where: FinanceOperationWhereUniqueInput!, create: FinanceOperationCreateInput!, update: FinanceOperationUpdateInput!): FinanceOperation!
  upsertIncomeCategory(where: IncomeCategoryWhereUniqueInput!, create: IncomeCategoryCreateInput!, update: IncomeCategoryUpdateInput!): IncomeCategory!
  upsertExpenseCategory(where: ExpenseCategoryWhereUniqueInput!, create: ExpenseCategoryCreateInput!, update: ExpenseCategoryUpdateInput!): ExpenseCategory!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyFinanceOperations(data: FinanceOperationUpdateInput!, where: FinanceOperationWhereInput): BatchPayload!
  updateManyIncomeCategories(data: IncomeCategoryUpdateInput!, where: IncomeCategoryWhereInput): BatchPayload!
  updateManyExpenseCategories(data: ExpenseCategoryUpdateInput!, where: ExpenseCategoryWhereInput): BatchPayload!
  updateManyAccounts(data: AccountUpdateInput!, where: AccountWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFinanceOperations(where: FinanceOperationWhereInput): BatchPayload!
  deleteManyIncomeCategories(where: IncomeCategoryWhereInput): BatchPayload!
  deleteManyExpenseCategories(where: ExpenseCategoryWhereInput): BatchPayload!
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  financeOperations(where: FinanceOperationWhereInput, orderBy: FinanceOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinanceOperation]!
  incomeCategories(where: IncomeCategoryWhereInput, orderBy: IncomeCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IncomeCategory]!
  expenseCategories(where: ExpenseCategoryWhereInput, orderBy: ExpenseCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExpenseCategory]!
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  user(where: UserWhereUniqueInput!): User
  financeOperation(where: FinanceOperationWhereUniqueInput!): FinanceOperation
  incomeCategory(where: IncomeCategoryWhereUniqueInput!): IncomeCategory
  expenseCategory(where: ExpenseCategoryWhereUniqueInput!): ExpenseCategory
  account(where: AccountWhereUniqueInput!): Account
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  financeOperationsConnection(where: FinanceOperationWhereInput, orderBy: FinanceOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinanceOperationConnection!
  incomeCategoriesConnection(where: IncomeCategoryWhereInput, orderBy: IncomeCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IncomeCategoryConnection!
  expenseCategoriesConnection(where: ExpenseCategoryWhereInput, orderBy: ExpenseCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseCategoryConnection!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  financeOperation(where: FinanceOperationSubscriptionWhereInput): FinanceOperationSubscriptionPayload
  incomeCategory(where: IncomeCategorySubscriptionWhereInput): IncomeCategorySubscriptionPayload
  expenseCategory(where: ExpenseCategorySubscriptionWhereInput): ExpenseCategorySubscriptionPayload
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
}

type User implements Node {
  id: ID!
  phone: String!
  name: String
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  financeOperations(where: FinanceOperationWhereInput, orderBy: FinanceOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinanceOperation!]
  incomeCategories(where: IncomeCategoryWhereInput, orderBy: IncomeCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IncomeCategory!]
  expenseCategories(where: ExpenseCategoryWhereInput, orderBy: ExpenseCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExpenseCategory!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  phone: String!
  name: String
  accounts: AccountCreateManyWithoutOwnerInput
  financeOperations: FinanceOperationCreateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryCreateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutExpenseCategoriesInput {
  create: UserCreateWithoutExpenseCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFinanceOperationsInput {
  create: UserCreateWithoutFinanceOperationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIncomeCategoriesInput {
  create: UserCreateWithoutIncomeCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAccountsInput {
  phone: String!
  name: String
  financeOperations: FinanceOperationCreateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryCreateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryCreateManyWithoutCreatedByInput
}

input UserCreateWithoutExpenseCategoriesInput {
  phone: String!
  name: String
  accounts: AccountCreateManyWithoutOwnerInput
  financeOperations: FinanceOperationCreateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryCreateManyWithoutCreatedByInput
}

input UserCreateWithoutFinanceOperationsInput {
  phone: String!
  name: String
  accounts: AccountCreateManyWithoutOwnerInput
  incomeCategories: IncomeCategoryCreateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryCreateManyWithoutCreatedByInput
}

input UserCreateWithoutIncomeCategoriesInput {
  phone: String!
  name: String
  accounts: AccountCreateManyWithoutOwnerInput
  financeOperations: FinanceOperationCreateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  phone_ASC
  phone_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  phone: String!
  name: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  phone: String
  name: String
  accounts: AccountUpdateManyWithoutOwnerInput
  financeOperations: FinanceOperationUpdateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryUpdateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryUpdateManyWithoutCreatedByInput
}

input UserUpdateOneWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutAccountsDataInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneWithoutExpenseCategoriesInput {
  create: UserCreateWithoutExpenseCategoriesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutExpenseCategoriesDataInput
  upsert: UserUpsertWithoutExpenseCategoriesInput
}

input UserUpdateOneWithoutFinanceOperationsInput {
  create: UserCreateWithoutFinanceOperationsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutFinanceOperationsDataInput
  upsert: UserUpsertWithoutFinanceOperationsInput
}

input UserUpdateOneWithoutIncomeCategoriesInput {
  create: UserCreateWithoutIncomeCategoriesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutIncomeCategoriesDataInput
  upsert: UserUpsertWithoutIncomeCategoriesInput
}

input UserUpdateWithoutAccountsDataInput {
  phone: String
  name: String
  financeOperations: FinanceOperationUpdateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryUpdateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutExpenseCategoriesDataInput {
  phone: String
  name: String
  accounts: AccountUpdateManyWithoutOwnerInput
  financeOperations: FinanceOperationUpdateManyWithoutCreatedByInput
  incomeCategories: IncomeCategoryUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutFinanceOperationsDataInput {
  phone: String
  name: String
  accounts: AccountUpdateManyWithoutOwnerInput
  incomeCategories: IncomeCategoryUpdateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutIncomeCategoriesDataInput {
  phone: String
  name: String
  accounts: AccountUpdateManyWithoutOwnerInput
  financeOperations: FinanceOperationUpdateManyWithoutCreatedByInput
  expenseCategories: ExpenseCategoryUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutAccountsInput {
  update: UserUpdateWithoutAccountsDataInput!
  create: UserCreateWithoutAccountsInput!
}

input UserUpsertWithoutExpenseCategoriesInput {
  update: UserUpdateWithoutExpenseCategoriesDataInput!
  create: UserCreateWithoutExpenseCategoriesInput!
}

input UserUpsertWithoutFinanceOperationsInput {
  update: UserUpdateWithoutFinanceOperationsDataInput!
  create: UserCreateWithoutFinanceOperationsInput!
}

input UserUpsertWithoutIncomeCategoriesInput {
  update: UserUpdateWithoutIncomeCategoriesDataInput!
  create: UserCreateWithoutIncomeCategoriesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  accounts_every: AccountWhereInput
  accounts_some: AccountWhereInput
  accounts_none: AccountWhereInput
  financeOperations_every: FinanceOperationWhereInput
  financeOperations_some: FinanceOperationWhereInput
  financeOperations_none: FinanceOperationWhereInput
  incomeCategories_every: IncomeCategoryWhereInput
  incomeCategories_some: IncomeCategoryWhereInput
  incomeCategories_none: IncomeCategoryWhereInput
  expenseCategories_every: ExpenseCategoryWhereInput
  expenseCategories_some: ExpenseCategoryWhereInput
  expenseCategories_none: ExpenseCategoryWhereInput
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
